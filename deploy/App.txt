<!DOCTYPE html>
<html>
<head>
    <title>Revamped Validation App</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon Aug 22 2016 20:04:57 GMT-0400 (EDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Aug 22 2016 20:04:57 GMT-0400 (EDT)";
        var STORY    = "US569";
        var BUILDER  = "srhoads";
        var CHECKSUM = 51514386082;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.techservices.validation.BaseRule',{
    extend: 'Ext.Base',
    /**
     * 
     * @cfg
     * {String} model The name of a record type that this rule applies to 
     */
    model: null,
    /**
     * 
     * @cfg {String} a human-readable label for the chart that will be made from the rule
     */
    label: 'No label supplied for this rule',
    
    constructor: function(config) {
        Ext.apply(this,config);
    },
    
    shouldExecuteRule: true,
    
    getDescription: function() {
        console.error('getRuleDescription is not implemented in subclass ', this.self.getName());
        return null;
    },
    
    getFetchFields: function() {
        return [];
    },
    
    getModel: function() {
        return this.model;
    },
    
    getFilters: function() {
        console.error('getFilters not implemented in subclass ', this.self.getName());
        throw 'getFilters not implemented in subclass ' + this.self.getName();
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        console.error('applyRuleToRecord not implemented in subclass ', this.self.getName());
        throw 'applyRuleToRecord not implemented in subclass ' + this.self.getName();
        
        return record;
    },
    
    /* override to allow the validator to check if the rule makes sense to run 
     * (e.g., the field checker for fields that don't even exist)
     * 
     * resolve promise with text if problem -- the validator will return the text so
     * it can be put into a description
     * 
     * The rule will still be executed unless this.shouldExecuteRule is set to false (and
     * the rule class implements skipping because of this.shouldExecuteRule).
     * 
     * A rule class could be multi-part and only partially fail, so execution or not execution
     * needs to be handled by the class itself.
     * 
     */
    precheckRule: function() {
        return null;
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.InitiativeNoThemeRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsinitiativenothemerule',
    
   
    config: {
        model: 'PortfolioItem/Initiative',
        label: 'Initiative w/o Theme'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Initiative without Theme."
        );
    },
    
    getFetchFields: function() {
        return ['Name','Parent'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        //var missingFields = [];

console.log("applyRuleToRecord",record);

        if ( Ext.isEmpty(record.get('Parent') ) ) {
            var msg = "Portfolio Initiatives must be linked to a Theme.";
            return msg;   
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        

        return Rally.data.wsapi.Filter.and([
            {property:'Parent',operator:'=',value:null}
        ]);
    }
});
Ext.define('CA.techservices.validation.StoryCompletedNoActuals',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tsstorycompletednoactuals',
    config: {
        model: 'HierarchicalRequirement',
        label: 'Completed without Actuals (Story)',
        completedStates: ['Completed','Accepted']
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories that have reached the Completed state but have nothing in the Actuals field on their tasks."
        );
    },
    
    getFetchFields: function() {
        return ['TaskActualTotal','ScheduleState'];
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'ScheduleState',operator:'>=',value:'Completed'},
            {property:'TaskActualTotal',operator: '<', value: .0000001 },
            {property:'DirectChildrenCount',value: 0}
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( record.get('TaskActualTotal') > 0 || !Ext.Array.contains(this.completedStates, record.get('ScheduleState')) ) {
            return false; 
        }
        return Ext.String.format('Completed but has no Actuals (State:{0})', record.get('ScheduleState'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.StoryRequiredFieldRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstoryrequiredfieldrule',
    
   
    config: {
        model: 'HierarchicalRequirement',
        requiredFields: [],
        label: 'Missing Required Fields (Story)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories that are missing expected fields."
        );
    },
    
    getFetchFields: function() {
        return this.requiredFields;
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        Ext.Array.each(this.requiredFields, function (field_name) {
            if ( this.isValidField(record, field_name) ) {
                var value = record.get(field_name);
                if ( Ext.isEmpty(value) ) {
                    missingFields.push(record.getField(field_name).displayName);
                }
            }
        },this);
        if (missingFields.length === 0) {
            return false;
        }
        return Ext.String.format('Fields Missing: {0}', missingFields.join(','))
    },
    
    /* 
     * override to allow the validator to check if the rule makes sense to run 
     * 
     * resolve promise with text if problem
     * 
     */
    precheckRule: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
                
        this.requestedRequiredFields = this.requiredFields;
        
        if ( Ext.isString(this.model) ) {
            Rally.data.ModelFactory.getModel({
                type: this.model,
                success: function(model) {
                    var bad_fields = Ext.Array.filter(me.requiredFields, function (field_name) {
                        return !me.isValidField(model,field_name);
                    });
                    
                    Ext.Array.each(bad_fields, function(field){
                        Ext.Array.remove(me.requiredFields, field);
                    });
                    
                    var text = null;
                    if ( bad_fields.length > 0 ) {
                        text = "Cannot perform Field Validation for Stories for nonexistent fields: " + bad_fields.join(', ');
                    }
                    
                    deferred.resolve(text);
                },
                failure: function() {
                    deferred.reject("Issue prechecking Rule");
                }
            });
        }
        
        return deferred.promise;
    },
    
    getFilters: function() {        
        var filters = Ext.Array.map(this.requiredFields, function(field) {
            return { property: field, value: "" };
        });
        
        var field_filter = Rally.data.wsapi.Filter.or(filters);
        var leaf_filter = Ext.create('Rally.data.wsapi.Filter',{property:'DirectChildrenCount',value: 0});
        
        return leaf_filter.and(field_filter);
    }
});
Ext.define('CA.techservices.validation.StoryNoFeatureExcludeUnfinishedRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstorynofeatureexcludeunfinishedrule',
    
   
    config: {
        model: 'HierarchicalRequirement',
        label: 'No Feature (Story Excl [Unfinished])'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories without Features excluding those with [Unfinished] in the Name."
        );
    },
    
    getFetchFields: function() {
        return ['Feature','Name'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        if ( Ext.isEmpty(record.get('Feature') ) && (!/^\[Unfinished\]/.test(record.get('Name') ) ) ) {
            var msg = "Stories must have Features unless they have [Unfinished] in the name.";
            return msg;   
        }
        
        return null; // no rule violation
    },
    
    getFilters: function() {        
        var today = Rally.util.DateTime.toIsoString(new Date());

        return Rally.data.wsapi.Filter.and([
            {property:'Feature',operator:'=',value:null},
            {property:'Name',operator: '!contains', value: "[Unfinished]" }
        ]);
    }
});
Ext.define('CA.techservices.validation.StoryNoReleaseExcludeUnfinishedRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstorynoreleaseexcludeunfinishedrule',
    
   
    config: {
        model: 'HierarchicalRequirement',
        label: 'No Release (Story Excl Unfinish)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories not assigned to a Release excluding those with [Unfinished] in the Name."
        );
    },
    
    getFetchFields: function() {
        return ['Release','Name'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        //var missingFields = [];

console.log("applyRuleToRecord",record);

        if ( Ext.isEmpty(record.get('Release') ) && (!/^\[Unfinished\]/.test(record.get('Name') ) ) && (record.get('DirectChildrenCount') < 1)) {
            var msg = "Stories must be assigned to a Release unless they have [Unfinished] in the name.";
            return msg;   
        }
        
        return null; // no rule violation
    },
    
    getFilters: function() {        
        return Rally.data.wsapi.Filter.and([
            {property:'Release',operator:'=',value:null},
            {property:'Name',operator: '!contains', value: "[Unfinished]" },
            {property:'DirectChildrenCount',operator: '=', value: 0 }            
        ]);
    }
});
Ext.define('CA.techservices.validation.StoryNoNullPlanEstimateRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstorynonullplanestimaterule',
    
   
    config: {
        model: 'HierarchicalRequirement',
        label: 'Null Plan Estimate (Story)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories in a current or past iteration should not be greater than defined and missing a plan estimate."
        );
    },
    
    getFetchFields: function() {
        return ['PlanEstimate','Iteration','ScheduleState'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        if ( Ext.isEmpty(record.get('Iteration') ) ) {
            return null;
        }
        
        var today = Rally.util.DateTime.toIsoString(new Date());
        
        if ( record.get('Iteration').StartDate > today ) {
            return null;
        }
        
        if ( record.get('ScheduleState') == "Defined" ) {
            return null;
        }
        
        if ( !Ext.isEmpty(record.get('PlanEstimate') ) ) {
            return null;
        }
        return Ext.String.format('Has null for plan estimate');
    },
    
    getFilters: function() {        
        var today = Rally.util.DateTime.toIsoString(new Date());

        return Rally.data.wsapi.Filter.and([
            {property:'PlanEstimate',operator:'>',value:0},
            {property:'Iteration.StartDate',operator: '<', value: today },
            {property:'ScheduleState',operator: '>', value: 'Defined' }
        ]);
    }
});
Ext.define('CA.techservices.validation.StoryReleaseNotEqFeatureReleaseExcludeUnfinishedRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstoryreleasenoteqfeaturereleaseexcludeunfinishedrule',
     
    config: {
        model: 'HierarchicalRequirement',
        label: 'Story Release Not Equal Feature Release (Excl [Unfinished])'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Story Release Should be the same as Feature Release excluding those with [Unfinished] in the Name."
        );
    },
    
    getFetchFields: function() {
        return ['Feature','Name','Release'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        // the statement below - short-circuits if the story does not have a release or the feature does not have a release. 
        if (((record.get('Release') && record.get('Feature')) && record.get('Feature').Release) && ((record.get('Release').Name) == (record.get('Feature').Release.Name)))  {
            return null; // no rule violation
        } else {
            var us_release = "No Release";
            if (record.get('Release') != null) {
                us_release = record.get('Release').Name;
            }
            var fe_msg = "No Release";
            if (record.get('Feature') && (record.get('Feature').Release != null)) {
                fe_msg = record.get('Feature').Release.Name;
            } else {
                fe_msg = "No Feature at all!";
            }
        
            return Ext.String.format("Story.Release({0}) != Feature.Release ({1})!",us_release,fe_msg);
        }        
    },
    
    getFilters: function() {        
        var today = Rally.util.DateTime.toIsoString(new Date());

        return Rally.data.wsapi.Filter.and([
            {property:'Feature',operator:'!=',value:null},
            {property:'Name',operator: '!contains', value: "[Unfinished]" }
        ]);
    }
});
Ext.define('CA.techservices.validation.TaskActiveNoToDo',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tstaskactivenotodo',
    config: {
        model: 'Task',
        label: 'Incomplete Task Without ToDo'
    },
    
    getFetchFields: function() {
        return ['ToDo','State'];
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that are not yet complete but don't have hours in the To Do field."
        );
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'ToDo',operator: '<', value: .0000001 },
            {property:'State',operator: '<', value: 'Completed' }
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( record.get('ToDo') > 0 || record.get('State') == "Completed" ) {
            return false; 
        }
        return Ext.String.format('Is Active But Has No ToDo (State:{0})', record.get('State'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.TaskCompletedNoActuals',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tstaskcompletednoactuals',
    config: {
        model: 'Task',
        label: 'Completed Without Actuals (Task)',
        completedStates: ['Completed']
    },
    
    getFetchFields: function() {
        return ['Actuals','State'];
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that are Completed but do not have any hours in the Actuals field."
        );
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'State',operator:'=',value:'Completed'},
            {property:'Actuals',operator: '<', value: .0000001 }
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( record.get('Actuals') > 0 || !Ext.Array.contains(this.completedStates, record.get('State')) ) {
            return false; 
        }
        return Ext.String.format('Completed but has no Actuals (State:{0})', record.get('State'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.TaskRequiredFieldRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tstaskrequiredfieldrule',
    
   
    config: {
        model: 'Task',
        requiredFields: [],
        label: 'Required Fields Are Missing (Task)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that are missing expected fields."
        );
    },
    
    getFetchFields: function() {
        return this.requiredFields;
    },
    
    /* model MUST be a model not just a model name */
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        Ext.Array.each(this.requiredFields, function (field_name) {
            if ( this.isValidField(record, field_name) ) {
                var value = record.get(field_name);
                if ( Ext.isEmpty(value) ) {
                    missingFields.push(record.getField(field_name).displayName);
                }
            }
        },this);
        if (missingFields.length === 0) {
            return false;
        }
        return Ext.String.format('Fields Missing: {0}', missingFields.join(','))
    },
    
    /* 
     * override to allow the validator to check if the rule makes sense to run 
     * 
     * resolve promise with text if problem
     * 
     */
    precheckRule: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
                
        this.requestedRequiredFields = this.requiredFields;
        
        if ( Ext.isString(this.model) ) {
            Rally.data.ModelFactory.getModel({
                type: this.model,
                success: function(model) {
                    var bad_fields = Ext.Array.filter(me.requiredFields, function (field_name) {
                        return !me.isValidField(model,field_name);
                    });
                    
                    Ext.Array.each(bad_fields, function(field){
                        Ext.Array.remove(me.requiredFields, field);
                    });
                    
                    var text = null;
                    if ( bad_fields.length > 0 ) {
                        text = "Cannot perform Field Validation for Tasks for nonexistent fields: " + bad_fields.join(', ');
                    }
                    
                    deferred.resolve(text);
                },
                failure: function() {
                    deferred.reject("Issue prechecking Rule");
                }
            });
        }
        
        return deferred.promise;
    },
    
    getFilters: function() {        
        var filters = Ext.Array.map(this.requiredFields, function(field) {
            return { property: field, value: "" };
        });
        
        return Rally.data.wsapi.Filter.or(filters);
    }
});
Ext.define('CA.techservices.validation.TaskTodoNoEstimateRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tstasktodonoestimaterule',
    config: {
        model: 'Task',
        label: 'Positive ToDo But No Estimate (Task)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that have hours left in the To Do field but no Estimate."
        );
    },
    
    getFetchFields: function() {
        return ['ToDo','Estimate'];
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'ToDo',operator:'>',value:0},
            {property:'Estimate',operator: '<', value: .0000001 }
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( !record.get('ToDo') > 0 || record.get('Estimate') > 0 ) {
            return false; 
        }
        return Ext.String.format('Has ToDo But No Estimate (ToDo:{0})', record.get('ToDo'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.ThemeNoProductGoalRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsthemenoproductgoalrule',
    
   
    config: {
        model: 'PortfolioItem/Theme',
        label: 'Theme w/o Product Goal'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Themes without Product Goals."
        );
    },
    
    getFetchFields: function() {
        return ['Name','Parent'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        //var missingFields = [];

        if ( Ext.isEmpty(record.get('Parent') ) ) {
            var msg = "Portfolio Themes must be linked to a Product Goal.";
            return msg;   
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        

        return Rally.data.wsapi.Filter.and([
            {property:'Parent',operator:'=',value:null}
        ]);
    }
});
Ext.define('CA.techservices.validation.ThemeProjectNotGlobalDevelopmentRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsthemeprojectnotglobaldevelopmentrule',
    
   
    config: {
        model: 'PortfolioItem/Theme',
        label: 'Theme Project Not Global Development'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Themes must be in the Global Development Project."
        );
    },
    
    getFetchFields: function() {
        return ['Name','Project'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        //var missingFields = [];

        if ( record.get('Project').Name != 'A' )  {
            var msg = Ext.String.format("Portfolio Themes must be saved into the Global Development project, not {0}.",record.get('Project').Name);
            return msg;   
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        

        return Rally.data.wsapi.Filter.and([
            {property:'Parent',operator:'=',value:null}
        ]);
    }
});
Ext.define('CA.techservices.validator.Validator',{
    alias: 'widget.tsvalidator',
    
    
    /**
     * 
     * [{rule}] An array of validation rules
     */
    rules: [],
    
    recordsByModel: {},
    
    categoryField: 'Project',
    
    // fields that all rules should fetch
    fetchFields: [],
    /**
     * 
     * a hash containing events for a data point e.g.,
     * 
     * points will include a field called _records holding the associated records
     * and each record will have a field called __ruleText holding a statement about
     * its violation
     * 
     *     {
     *          click: function() {
     *          me.showDrillDown(this._records,this._name);
     *      }
     */
    pointEvents: null,
    /**
     * 
     * a hash of filters by model type.  Filter will be ANDed to the filters we get from the validation rules 
     * (which are themselves ORed together).
     */
    baseFilters: null,
    
    constructor: function(config) {
        Ext.apply(this,config);
        
        var rules = [];
        
        Ext.Array.each(this.rules, function(rule){
            var name = rule.xtype;
            if ( !Ext.isEmpty(name) ) {
                delete rule.xtype;
                console.log('Initializing ', name);
                rules.push(Ext.createByAlias('widget.' + name, rule));
            }
        });
        
        this.rules = rules;
    },
    
    getRuleDescriptions: function() {
        var text = "<ul>";
        
        Ext.Array.each(this.rules, function(rule){
            var rule_description = rule.getDescription() || "";
            if ( !Ext.isEmpty(rule_description) ) {
                text = text + "<li>" + rule_description + "</li>";
            }
        });
        text = text + "</ul>";
        
        return text;
    },
    
    getFiltersByModel: function() {
        var me = this,
            filters_by_model = {};
            
        Ext.Array.each(this.rules, function(rule){
            var model = rule.getModel();
            var filters = rule.getFilters();

            if ( !Ext.isEmpty(model) && !Ext.isEmpty(filters) ) {
                
                console.log("GetFiltersByModel",filters.toString(),rule.xtype);

                if ( Ext.isEmpty(filters_by_model[model]) ) {
                    filters_by_model[model] = [];
                }
                filters_by_model[model].push(filters);
            }
        });
        
        Ext.Object.each(filters_by_model, function(model, filters){
            filters = Ext.Array.unique( Ext.Array.flatten(filters) );
            filters_by_model[model] = Rally.data.wsapi.Filter.or(filters);
            
            if ( me.baseFilters && me.baseFilters != {} && me.baseFilters[model] != {} ) {
                
                console.log("Flattening the Filter array ",me.baseFilters);

                filters_by_model[model] = filters_by_model[model].and(me.baseFilters[model]);
            }
        });
        
        return filters_by_model;
    },
    
    getFetchFieldsByModel: function() {
        var me = this,
            fields_by_model = {};
            
        Ext.Array.each(this.rules, function(rule){
            var model = rule.getModel();
            var fields = rule.getFetchFields();

            if ( !Ext.isEmpty(model) && !Ext.isEmpty(fields) && fields.length > 0 ) {
                if ( Ext.isEmpty(fields_by_model[model]) ) {
                    fields_by_model[model] = [me.categoryField,'Name'];
                }
                fields_by_model[model].push(fields);
            }
        });
        
        Ext.Object.each(fields_by_model, function(model, fields){
            fields = Ext.Array.flatten(fields);
            fields = Ext.Array.push(fields, me.fetchFields);
            
            fields_by_model[model] = Ext.Array.unique(fields);
        });
        
        return fields_by_model;
    },
    
    // returns a promise, promise fulfilled by hash of results by model type
    gatherData: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
                
        var fetch_by_model = this.getFetchFieldsByModel();
        var filters_by_model = this.getFiltersByModel();
        
        var promises = [];
        Ext.Object.each(fetch_by_model, function(model, fetch){
            var config = {
                model: model,
                fetch: fetch,
                limit: Infinity,
                filters: filters_by_model[model]
            };
            
            promise = function() {
                return this._loadWsapiRecords(config);
            };
            promises.push(promise);
        },this);
        
        Deft.Chain.sequence(promises,this).then({
            success: function(results) {
                me.recordsByModel = {};
                Ext.Array.each(results, function(result) {
                    me.recordsByModel = Ext.apply(me.recordsByModel, result);
                });
                deferred.resolve(results);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getChartData: function() {
        if ( this.recordsByModel == {} ) {
            console.log('No search results');
            return {};
        }
        
        var categories = this.getCategories();
        var series = this.getSeries(categories);
        
        return { series: series, categories: categories };
        
    },
    
    getCategories: function() {
        var me = this,
            records = Ext.Array.flatten(Ext.Object.getValues(this.recordsByModel));
        
        var category_field = this.categoryField;
        
        var possible_categories = Ext.Array.map(records, function(record) {
            return me.getCategoryFromRecord(record,category_field);
        });
        
        return Ext.Array.unique(possible_categories);
    },
    
    getCategoryFromRecord: function(record,category_field) {
        if ( Ext.isEmpty(record.get(category_field)) ) { return ""; }
        if ( Ext.isString(record.get(category_field)) ) { return record.get(category_field); }
        return record.get(category_field)._refObjectName;
    },
    
    getSeries: function(categories) {
        var me = this,
            category_field = me.categoryField,
            series = [];
            
        // one series per rule, one stack per model type
        Ext.Array.each(this.rules, function(rule){
            var series_name = rule.getUserFriendlyRuleLabel();
            var model = rule.getModel();
            var records = me.recordsByModel[model];
            
            var failed_records = me.getFailedRecordsForRule(records, rule);

            var records_by_category = me.getRecordsByCategory(failed_records, categories, category_field);
            
            var data = [];
            Ext.Array.each(categories, function(category){
                var category_records = records_by_category[category] || [];
                
                var count = category_records.length;
                var datum = { 
                    y: count,
                    _records: category_records,
                    _name: series_name
                };
                
                if ( !Ext.isEmpty(me.pointEvents) ) {
                    datum.events = me.pointEvents
                }
                data.push(datum);
            });
            series.push({
                name: series_name,
                
                records: failed_records,
                data: data,
                stack: model
            });
        });
        
        return series;
    },
    
    getFailedRecordsForRule: function(records, rule) {
        var failed_records = [];
        Ext.Array.each(records, function(record) {
            var failure = rule.applyRuleToRecord(record);
            if ( failure ) {
                var texts = record.get('__ruleText') || [];
                texts.push(failure);
                record.set('__ruleText', texts);
                failed_records.push(record);
            }
        });
        
        return failed_records;
    },
    
    getRecordsByCategory: function(records, categories, category_field) {
        var me = this,
            record_hash = {};
            
        Ext.Array.each(records, function(record){
            var category = me.getCategoryFromRecord(record,category_field);
            if ( Ext.isEmpty(record_hash[category]) ) {
                record_hash[category] = [];
            }
            record_hash[category].push(record);
        });
        
        return record_hash;
    },
    
    getPrecheckResults: function() {        
        var promises = Ext.Array.map(this.rules, function(rule){
            return function() {
                return rule.precheckRule();
            };
        });
        
        if ( promises.length === 0 ) {
            return null;
        }
        
        return Deft.Chain.sequence(promises);
    },
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    var result = {};
                    result[config.model] = records;
                    deferred.resolve(result);
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    }
});
Ext.define("TSValidationApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "TSValidationApp"
    },
    config: {
        defaultSettings: {
            showStoryRules: true,
            showTaskRules: false,
            showPortfolioItemRules: false
        }
    },
    getSettingsFields: function() {
        return [
        { 
            name: 'showPortfolioItemRules',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: '0 0 25 200',
            boxLabel: 'Show Portfolio Item Rules<br/><span style="color:#999999;"><i>Tick to apply rules for Portfolio Items.</i></span>'
        },
        { 
            name: 'showStoryRules',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: '0 0 25 200',
            boxLabel: 'Show Story Rules<br/><span style="color:#999999;"><i>Tick to apply rules for Stories.</i></span>'
        },
        { 
            name: 'showTaskRules',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: '0 0 25 200',
            boxLabel: 'Show Task Rules<br/><span style="color:#999999;"><i>Tick to apply rules for Tasks.</i></span>'
        }
        ];
    },
    rulesByType: {
        PortfolioItem: [           
            {xtype:'tsthemenoproductgoalrule'},
            {xtype:'tsinitiativenothemerule'},
            {xtype:'tsthemeprojectnotglobaldevelopmentrule'}
        ],
        HierarchicalRequirement: [
            {xtype:'tsstoryrequiredfieldrule', requiredFields: ['Owner','Description']},
            {xtype:'tsstorynofeatureexcludeunfinishedrule' },    
            {xtype:'tsstorynoreleaseexcludeunfinishedrule' },
            {xtype:'tsstorynonullplanestimaterule' },
            {xtype:'tsstoryreleasenoteqfeaturereleaseexcludeunfinishedrule'}
        ],
        Defect: [
          //  {xtype:'tstaskactivenotodo'}
        ],
        Task: [
            {xtype:'tstaskrequiredfieldrule',  requiredFields: ['Owner']},
            {xtype:'tstasktodonoestimaterule'},
          //  {xtype:'tstaskactivenotodorule'}
        ]
    },                    
    launch: function() {
        this.validator = this._instantiateValidator();
        
        this.validator.getPrecheckResults().then({
            scope: this,
            success: function(issues) {
                
                var messages = Ext.Array.filter(issues, function(issue){
                    return !Ext.isEmpty(issue);
                });
                
                if ( messages.length > 0 ) {
                    var append_text = "<br/><b>Precheck Issues:</b><br/><ul>";
                    Ext.Array.each(messages, function(message){
                        append_text += '<li>' + message + '</li>';
                    });
                    append_text += "</ul>";
                    
                    this.logger.log(append_text);
                }
                
                this._updateData();
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem with precheck', msg);
            }
        });
        
    },

      showDrillDown: function(records, title) {
        var me = this;

        var store = Ext.create('Rally.data.custom.Store', {
            data: records,
            pageSize: 2000
        });
        
        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'detailPopup',
            title     : title,
            width     : 500,
            height    : 400,
            closable  : true,
            layout    : 'border',
            items     : [
            {
                xtype                : 'rallygrid',
                region               : 'center',
                layout               : 'fit',
                sortableColumns      : true,
                showRowActionsColumn : false,
                showPagingToolbar    : false,
                columnCfgs           : [
                    {
                        dataIndex : 'FormattedID',
                        text: "id"
                    },
                    {
                        dataIndex : 'Name',
                        text: "Name",
                        flex: 1
                    },
                    {
                        dataIndex: '__ruleText',
                        text: 'Violations',
                        flex: 2,
                        renderer: function(value, meta, record) {
                            if ( Ext.isEmpty(value) ) { return ""; }
                            var display_value = "";
                            Ext.Array.each(value, function(violation){
                                display_value = display_value + Ext.String.format("<li>{0}</li>", violation);
                            });

                            return Ext.String.format("<ul>{0}</ul>", display_value);
                        }
                    }
                ],
                store : store
            }]
        }).show();
    },

_updateData: function() {
        var me = this;
        this.setLoading("Loading data...");
        
        Deft.Chain.pipeline([
            function() { 
                me.setLoading("Gathering data...");
                return me.validator.gatherData(); 
            },
            function() { 
                me.setLoading("Analyzing data...");
                return me.validator.getChartData(); 
            }
        ]).then({
            scope: this,
            success: function(results) {
                
                if ( results.categories && results.categories.length === 0 ) {
                    Ext.Msg.alert('','No violations found');
                    return;
                }
                
                this.display_rows = Ext.Object.getValues( this.validator.recordsByModel );
                
                this._makeChart(results);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading data', msg);
            }
        }).always(function() { me.setLoading(false); });
        
    }, 
    
    _instantiateValidator: function() {
        var me = this;

        var rules = [];
        if ( this.getSetting('showPortfolioItemRules') ) {
            rules = Ext.Array.push(rules, this.rulesByType['PortfolioItem']);
        }
        if ( this.getSetting('showStoryRules') ) {
            rules = Ext.Array.push(rules, this.rulesByType['HierarchicalRequirement']);
        }
        if ( this.getSetting('showTaskRules') ) {
            rules = Ext.Array.push(rules, this.rulesByType['Task']);
        }
        
        var validator = Ext.create('CA.techservices.validator.Validator',{
            rules: rules,
            fetchFields: ['FormattedID','ObjectID'],
//            baseFilters:{ 
//                 HierarchicalRequirement: {},
//                 Task: {}
//             },
            pointEvents: {
                click: function() {
                   me.showDrillDown(this._records,this._name);
                }
            }
        });
        
        return validator;
    },
    _makeChart: function(data) {
        var me = this;
        
        this.logger.log('_makeChart', data);
      //  var colors = CA.apps.charts.Colors.getConsistentBarColors();
        
        this.down("#display_box").add({
            chartData: data,
            xtype:'rallychart',
            loadMask: false,
            chartConfig: this._getChartConfig()  //,
        //    chartColors: colors
        });
    },
    
    _getChartConfig: function() {
        var me = this;
        
        var title_prefix = "";
        if ( this.getSetting('showPortfolioItemRules') ) {
            if (title_prefix.length > 0){
                title_prefix += ", ";
            }
            title_prefix = "Portfolio";
        }
        if ( this.getSetting('showStoryRules') ) {
            if (title_prefix.length > 0){
                title_prefix += ", ";
            }
            title_prefix += "Story";
        }
        if ( this.getSetting('showTaskRules')) {
            if (title_prefix.length > 0){
                title_prefix += " and ";
            }
            title_prefix += "Task";
        }
        
        return {
            chart: { type:'column' },
            title: { text: title_prefix + ' Validation Results' },
            xAxis: {},
            yAxis: { 
                min: 0,
                title: { text: 'Count' }
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                }
            }
        }
    },
    _loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _displayGrid: function(store,field_names){
        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: field_names
        });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
    
});

            
               Rally.launchApp('TSValidationApp', {
                   name: 'Revamped Validation App'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>